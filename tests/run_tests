#!/usr/bin/env python3

import subprocess
import sys
import difflib
import tempfile
import json

from enum import Enum
from collections import namedtuple
from argparse import ArgumentParser
from pathlib import Path
from dataclasses import dataclass


tests_path = Path(__file__).resolve().parent
ipath = tests_path / 'itests'

command_ref = ["bash", "--posix"]
command_san = ['valgrind', '-q', '--error-exitcode=100',
               '--leak-check=full', '--show-leak-kinds=all', '--']


DEFAULT_TIMEOUT = 2


_isatty = sys.stdout.isatty()


class Color(Enum):
    RED = "31"
    GREEN = "32"
    BLUE = "34"  # 94 is bright blue


def highlight(string, color: Color, bold=False):
    if not _isatty:
        return string
    color_code = color.value
    if bold:
        color_code += ';1'
    return f"\x1b[{color_code}m{string}\x1b[0m"


def _test_parser():
    parser = ArgumentParser(description='Runs the nsh test suite')
    paa = parser.add_argument

    paa('-t', '--timeout', action='store', type=int, default=DEFAULT_TIMEOUT,
        help='Define the maximum time a test can run for, in seconds')

    paa('-l', '--list-tests', action='store_true',
        help='List all tests')

    paa('-s', '--sanity', action='store_true',
        help='Run the test suite with sanity checks')

    paa('--check', action='store_true',
        help=f'Run the test suite against {" ".join(command_ref)}')

    paa('-q', '--quiet', action='store_true',
        help='Don\'t display diffs on failed tests')

    paa('target', help='hosts to run tests on')
    return parser


@dataclass
class TestResult:
    stdout: bytes
    stderr: bytes
    retcode: int

    @staticmethod
    def from_dict(d):
        return TestResult(d['stdout'].encode('utf-8'),
                          d['stderr'].encode('utf-8'),
                          int(d['retcode']))

    @staticmethod
    def from_proc(proc):
        return TestResult(
            proc.stdout,
            proc.stderr,
            int(proc.returncode)
        )


@dataclass
class Test:
    name: str
    path: Path
    is_disabled: bool
    description: str
    stdin: str
    expected: TestResult

    @staticmethod
    def from_path(path):
        data = json.loads(path.read_text())
        is_disabled = data.pop("is_disabled", False)
        return Test(
            path.stem,
            path,
            is_disabled,
            data.pop("desc"),
            data.pop("stdin"),
            TestResult.from_dict(data)
        )


def discover_suite(suite_path):
    return [Test.from_path(tpath)
            for tpath in suite_path.glob('*.json')
            if tpath.is_file()]


def discover_tests(options):
    for suite_path in ipath.iterdir():
        if not suite_path.is_dir():
            continue
        yield (suite_path, discover_suite(suite_path))


def run_process(conf, options, stdin):
    try:
        with tempfile.TemporaryDirectory() as tempdir:
            proc = subprocess.run(options, input=stdin,
                                  timeout=conf.timeout, cwd=tempdir,
                                  stderr=subprocess.PIPE,
                                  stdout=subprocess.PIPE)
            return TestResult.from_proc(proc)
    except subprocess.TimeoutExpired:
        return None


def diff_bytes_repr(result, expected):
    bytes_diff = difflib.diff_bytes(
        difflib.unified_diff,
        [result], [expected],
        fromfile=b"result", tofile=b"expected",
        lineterm=b"",
    )
    return b"\n".join(bytes_diff).decode('raw_unicode_escape')


@dataclass
class Mismatch:
    name: str
    error_message: str


def compare_results(result, expected):
    if result is None:
        return [Mismatch('timeout', 'timed out')]

    mismatches = []

    stdout_diff = diff_bytes_repr(result.stdout, expected.stdout)
    if stdout_diff:
        mismatches.append(Mismatch("stdout", stdout_diff))

    if bool(result.stderr) != bool(expected.stderr):
        def decs(p):
            return 'wrote' if p.stderr else 'did not write'
        mismatches.append(Mismatch('stderr', (
            f'tested program {decs(result)} on stderr, '
            f'whereas reference {decs(expected)}'
        )))

    if result.retcode != expected.retcode:
        retcode_message = f"expected {expected.retcode}, got {result.retcode}"
        mismatches.append(Mismatch('return code', retcode_message))
    return mismatches


def gen_command(conf):
    cmd = command_ref if conf.check else [conf.target]
    if conf.sanity:
        return command_san + cmd
    return cmd


def run_test(conf, test):
    stdin = test.stdin.encode('utf-8')
    cmd = gen_command(conf)
    result = run_process(conf, cmd, stdin)
    return compare_results(result, test.expected)


def print_result_header(test, mismatches):
    if test.is_disabled:
        tag = "[DISABLED]"
        color = Color.BLUE
    elif mismatches:
        tag = "[KO]"
        color = Color.RED
    else:
        tag = "[OK]"
        color = Color.GREEN
    colored_tag = highlight(tag, color, True)
    print(f"{colored_tag}\t{test.name}")


def log_test(conf, test, mismatches):
    print_result_header(test, mismatches)

    if not mismatches or conf.quiet or test.is_disabled:
        return

    # print a detailed error
    print(f"\n\t### {test.description}\n")
    for mismatch in mismatches:
        print(highlight(f'>>> mismatched {mismatch.name} <<<', Color.RED, True))
        print(mismatch.error_message)
        print()


clear_line = "\x1b[2K\r" if _isatty else '\n'


def process_test(options, test):
    print(f'Running {test.name}...', end='')
    mismatches = run_test(options, test)
    print(clear_line, end='')
    log_test(options, test, mismatches)


if __name__ == '__main__':
    options = _test_parser().parse_args()
    options.target = str(Path(options.target).resolve())
    tests = list(discover_tests(options))

    if options.list_tests:
        for suite, suite_tests in tests:
            print(f"{suite.name}:")
            for test in suite_tests:
                print(f"  - {test.name}")
        exit(0)

    for suite_path, suite_tests in tests:
        print(f'\n\t>> {highlight(suite_path.name, Color.GREEN, False)} <<', end='\n\n')
        for test in suite_tests:
            process_test(options, test)
